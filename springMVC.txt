The Spring Web MVC framework provides Model-View-Controller (MVC) architecture and ready components 
that can be used to develop flexible and loosely coupled web applications. 
The MVC pattern results in separating the different aspects of the application (input logic, business logic, and UI logic), 
while providing a loose coupling between these elements.

The Model encapsulates the application data and in general they will consist of POJO.

The View is responsible for rendering the model data and in general it generates HTML output that the client's
 browser can interpret.

The Controller is responsible for processing user requests and building
 an appropriate model and passes it to the view for rendering.

 Spring MVC Tutorial
A Spring MVC is a Java framework which is used to build web applications. It follows the 
Model-View-Controller design pattern. It implements all the basic features of a core 
spring framework like Inversion of Control, Dependency Injection.

A Spring MVC provides an elegant solution to use MVC in spring framework by the help of 
DispatcherServlet. Here, DispatcherServlet is a class that receives the incoming request 
and maps it to the right resource such as controllers, models, and views.

Model - A model contains the data of the application. A data can be a single object or a collection of objects.
Controller - A controller contains the business logic of an application. Here, the @Controller annotation is used to mark the class as the controller.
View - A view represents the provided information in a particular format. Generally, JSP+JSTL is used to create a view page. Although spring also supports other view technologies such as Apache Velocity, Thymeleaf and FreeMarker.
Front Controller - In Spring Web MVC, the DispatcherServlet class works as the front controller. It is responsible to manage the flow of the Spring MVC application.